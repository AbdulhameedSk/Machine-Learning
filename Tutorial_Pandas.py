# -*- coding: utf-8 -*-
"""Copy of Panads_Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hrao90WcEQXhDDDJ3ibu6JfY44MOb8Xq

## Pandas

Pandas is an open source Python package that provides numerous tools for data analysis. The package comes with several data structures that can be used for many different data manipulation tasks. It also has a variety of methods that can be invoked for data analysis, which comes in handy when working on data science and machine learning problems in Python.

### Advantages of Using Pandas

The following are some of the advantages of the Pandas library:

- It can present data in a way that is suitable for data analysis via its Series and DataFrame data structures.
- The package contains multiple methods for convenient data filtering.
- Pandas has a variety of utilities to perform Input/Output operations in a seamless manner. It can read data from a variety of formats such as CSV, TSV, MS Excel, etc.

#### How to install pandas ?
"""

# import pandas and np

import pandas as pd
import numpy as np

"""### Pandas Data Structures

Pandas has two main data structures for data storage:

- Series
- DataFrame

#### Series
A series is similar to a one-dimensional array. It can store data of any type. The values of a Pandas Series are mutable.
"""

s1 = pd.Series([1,2,3,4])
print(s1)

# A Series may also be created from a numpy array. 
# Let us create a numpy array then convert it into a Pandas Series:

fruits = np.array(['apple','orange','mango','pear'])
series2 = pd.Series(fruits)
print(series2)

"""#### DataFrame

The Pandas DataFrame can be seen as a table. It organizes data into rows and columns, making it a two-dimensional data structure. 

Potentially, the columns are of a different type and the size of the DataFrame is mutable, and hence can be modified.

To create a DataFrame, you can choose to start from scratch or convert other data structures like Numpy arrays into a DataFrame. 

Here is how you can create a DataFrame from scratch:
"""

df1 = pd.DataFrame({
    "C1": [1, 4, 8, 7, 9],
    "C2": ['a', 'column', 'with', 'a', 'string'],
    "C3": [1.23, 23.5, 45.6, 32.1234, 89.453],
    "C4": [True, False, True, False, True]
})

print(df1)

# It is possible for us to create a DataFrame from a list or even a set of lists.
mylist = [4, 8, 12, 16, 20]
df2 = pd.DataFrame(mylist)
print(df2)

items = [['Phone', 2000], ['TV', 1500], ['Radio', 800]]
df3 = pd.DataFrame(items)
print(df3)

items = [['Phone', 2000], ['TV', 1500], ['Radio', 800]]
df4 = pd.DataFrame(items, columns=['Item', 'Price'], dtype=float)
print(df4)

# To get a summary of this item's data
df4.describe()

"""### Importing Data
Often you'll need to use Pandas to analyze data that is stored in an Excel file or in a CSV file. This requires you to open and import the data from such sources into Pandas.

#### Importing CSV Data

A CSV file, which stands for comma separated value, is simply a text file with values separated by a comma (,). 

This is a very well-known and often-used standard
"""

data = pd.read_csv('cars.csv')
print(data)

data.head()

data.tail()

data.head(3)

data['Number']

data['Capacity']

# The loc() method is a nice utility that helps us read only certain rows of a specific column in the dataset
print (data.loc[[0, 4, 7], ['Type']])

data.loc[:, ['Type', 'Capacity']]

data.loc[:3, ['Type', 'Capacity']]

"""### Data Wrangling
Data wrangling is the process of processing data to prepare it for use in the next step. 

This processes include merging, grouping, and concatenation. 

This kind of manipulation is often needed in data science to get your data in to a form that works well with whatever analysis or algorithms that you're going to put it through.
"""

# Merging
d1 = {
    'subject_id': ['1', '2', '3', '4', '5'],
    'student_name': ['John', 'Emily', 'Kate', 'Joseph', 'Dennis']
}

d2 = {
    'subject_id': ['4', '5', '6', '7', '8'],
    'student_name': ['Brian', 'William', 'Lilian', 'Grace', 'Caleb']
}

df1 = pd.DataFrame(d1, columns=['subject_id', 'student_name'])
df2 = pd.DataFrame(d2, columns=['subject_id', 'student_name'])

df1

df2

pd.merge(df1, df2, on='subject_id')

# Grouping
#  process of putting data into various categories.

raw = {
    'Name': ['John', 'John', 'Grace', 'Grace', 'Benjamin', 'Benjamin', 'Benjamin',
        'Benjamin', 'John', 'Alex', 'Alex', 'Alex'],
    'Position': [2, 1, 1, 4, 2, 4, 3, 1, 3, 2, 4, 3],
    'Year': [2009, 2010, 2009, 2010, 2010, 2010, 2011, 2012, 2011, 2013, 2013, 2012],
    'Marks':[408, 398, 422, 376, 401, 380, 396, 388, 356, 402, 368, 378]
}
df3 = pd.DataFrame(raw)

df3

group = df3.groupby('Year')

group

group.get_group(2010)

#Concatenation
# basically means to add one set of data to another
print(pd.concat([df1, df2]))

pd.concat([df1, df2], axis=1)

"""### Descriptive Statistics
describe() function gives the descriptive statistics for numerical columns, but the character columns are excluded.
"""

data = {
    'Name': ['John', 'Alice', 'Joseph', 'Alex'],
    'English': [64, 78, 68, 58],
    'Maths': [76, 54, 72, 64]
}

df = pd.DataFrame(data)
df.describe()

